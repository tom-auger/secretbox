<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SecretBox</name>
    </assembly>
    <members>
        <member name="T:SecretBox.ISecretBox">
            <summary>
            A symmetric key cipher using the Gimli permutation.
            </summary>
        </member>
        <member name="M:SecretBox.ISecretBox.GenerateKey(System.Byte[])">
            <summary>
            Generates an encryption key.
            </summary>
            <param name="key">The buffer in which to place the generated key.</param>
        </member>
        <member name="M:SecretBox.ISecretBox.Encrypt(System.Byte[],System.Byte[],System.Int32,System.Byte[],System.String,System.Int64)">
            <summary>
            Encrypt a message using the given key, with context and optional message Id.
            </summary>
            <param name="ciphertext">A buffer in which to place the generated ciphertext.</param>
            <param name="message">The message to encrypt.</param>
            <param name="messageLength">The length of the message to encrypt.</param>
            <param name="key">The encryption key.</param>
            <param name="context">A string of maximum 8 characters describing the context.</param>
            <param name="messageId">Optional message Id. Defaults to 1.</param>
        </member>
        <member name="M:SecretBox.ISecretBox.Decrypt(System.Byte[],System.Byte[],System.Int32,System.Byte[],System.String,System.Int64)">
            <summary>
            Decrypt a ciphertext using the given key, with context and optional message Id.
            </summary>
            <param name="message">A buffer in which to place the decrypted message.</param>
            <param name="ciphertext">The ciphertext to decrypt.</param>
            <param name="ciphertextLength">The length of the ciphertext to decrypt.</param>
            <param name="key">The encryption key.</param>
            <param name="context">A string of maximum 8 characters describing the context.</param>
            <param name="messageId">Optional message Id. Defaults to 1.</param>
        </member>
        <member name="M:SecretBox.ISecretBox.TryDecrypt(System.Byte[],System.Byte[],System.Int32,System.Byte[],System.String,System.Int64)">
            <summary>
            Decrypt a ciphertext using the given key, with context and optional message Id.
            </summary>
            <param name="message">A buffer in which to place the decrypted message.</param>
            <param name="ciphertext">The ciphertext to decrypt.</param>
            <param name="ciphertextLength">The length of the ciphertext to decrypt.</param>
            <param name="key">The encryption key.</param>
            <param name="context">A string of maximum 8 characters describing the context.</param>
            <param name="messageId">Optional message Id. Defaults to 1.</param>
            <returns>Whether the decryption succeeded or not.</returns>
        </member>
        <member name="M:SecretBox.ISecretBox.CalculateCiphertextLength(System.Int32)">
            <summary>
            Calculates the length of the ciphertext when encrypting a message of the given length.
            </summary>
            <param name="messageLength">The length of the message to encrypt.</param>
            <returns>The length of the ciphertext.</returns>
        </member>
        <member name="M:SecretBox.ISecretBox.CalculateMessageLength(System.Int32)">
            <summary>
            Calculates the length of the message when decrypting a ciphertext of the given length.
            </summary>
            <param name="ciphertextLength">The length of the ciphertext to decrypt.</param>
            <returns>The length of the decrypted message.</returns>
        </member>
        <member name="T:SecretBox.Internal.Primitive">
            <summary>
            A C# translation of the c-ref implementation of the Gimli permutation.
            </summary>
        </member>
        <member name="M:SecretBox.Internal.Primitive.Gimli(System.Byte[],System.Byte)">
            <summary>
            <para>
            This is a C# translation of the c-ref implementation of 
            the Gimli permutation taken from https://gimli.cr.yp.to/impl.html. 
            </para>
            This is not intended for general usage! Only use for building your 
            own constructions.
            </summary>
            <param name="state">An array of 48 bytes on which to perform the Gimli permutation.</param>
            <param name="tag">A single byte tag to add to the end of the state.</param>
        </member>
        <member name="M:SecretBox.Internal.Primitive.Gimli(System.UInt32[])">
            <summary>
            <para>
            This is a C# translation of the c-ref implementation of 
            the Gimli permutation taken from https://gimli.cr.yp.to/impl.html. 
            </para>
            This is not intended for general usage! Only use for building your 
            own constructions.
            </summary>
            <param name="state">A 12 element vector on which to perform the Gimli permutation.</param>
        </member>
        <member name="T:SecretBox.SecretBox">
            <summary>
            A symmetric key cipher using the Gimli permutation.
            </summary>
        </member>
        <member name="F:SecretBox.SecretBox.KeyBytes">
            <summary>
            The size of the encryption key.
            </summary>
        </member>
        <member name="F:SecretBox.SecretBox.ContextBytes">
            <summary>
            The size of the context. 
            </summary>
        </member>
        <member name="F:SecretBox.SecretBox.HeaderBytes">
            <summary>
            The size of the ciphertext header.
            </summary>
        </member>
        <member name="F:SecretBox.SecretBox.DefaultMessageId">
            <summary>
            The message Id is an optional counter that can be used to send a sequence of 
            messages encrypted with the same key. It is entirely optional and using a 
            constant value for all messages does not impact security.
            </summary>
        </member>
        <member name="M:SecretBox.SecretBox.GenerateKey(System.Byte[])">
            <summary>
            Generates an encryption key.
            </summary>
            <param name="key">The buffer in which to place the generated key.</param>
        </member>
        <member name="M:SecretBox.SecretBox.Encrypt(System.Byte[],System.Byte[],System.Int32,System.Byte[],System.String,System.Int64)">
            <summary>
            Encrypt a message using the given key, with context and optional message Id.
            </summary>
            <param name="ciphertext">A buffer in which to place the generated ciphertext.</param>
            <param name="message">The message to encrypt.</param>
            <param name="messageLength">The length of the message to encrypt.</param>
            <param name="key">The encryption key.</param>
            <param name="context">A string of maximum 8 characters describing the context.</param>
            <param name="messageId">Optional message Id. Defaults to 1.</param>
        </member>
        <member name="M:SecretBox.SecretBox.TryDecrypt(System.Byte[],System.Byte[],System.Int32,System.Byte[],System.String,System.Int64)">
            <summary>
            Decrypt a ciphertext using the given key, with context and optional message Id.
            </summary>
            <param name="message">A buffer in which to place the decrypted message.</param>
            <param name="ciphertext">The ciphertext to decrypt.</param>
            <param name="ciphertextLength">The length of the ciphertext to decrypt.</param>
            <param name="key">The encryption key.</param>
            <param name="context">A string of maximum 8 characters describing the context.</param>
            <param name="messageId">Optional message Id. Defaults to 1.</param>
            <returns>Whether the decryption succeeded or not.</returns>
        </member>
        <member name="M:SecretBox.SecretBox.Decrypt(System.Byte[],System.Byte[],System.Int32,System.Byte[],System.String,System.Int64)">
            <summary>
            Decrypt a ciphertext using the given key, with context and optional message Id.
            </summary>
            <param name="message">A buffer in which to place the decrypted message.</param>
            <param name="ciphertext">The ciphertext to decrypt.</param>
            <param name="ciphertextLength">The length of the ciphertext to decrypt.</param>
            <param name="key">The encryption key.</param>
            <param name="context">A string of maximum 8 characters describing the context.</param>
            <param name="messageId">Optional message Id. Defaults to 1.</param>
        </member>
        <member name="M:SecretBox.SecretBox.CalculateCiphertextLength(System.Int32)">
            <summary>
            Calculates the length of the ciphertext when encrypting a message of the given length.
            </summary>
            <param name="messageLength">The length of the message to encrypt.</param>
            <returns>The length of the ciphertext.</returns>
        </member>
        <member name="M:SecretBox.SecretBox.CalculateMessageLength(System.Int32)">
            <summary>
            Calculates the length of the message when decrypting a ciphertext of the given length.
            </summary>
            <param name="ciphertextLength">The length of the ciphertext to decrypt.</param>
            <returns>The length of the decrypted message.</returns>
        </member>
        <member name="T:SecretBox.Utilities.ByteUintConverter">
            <summary>
            This is a hack to convert byte[] to uint[] without requiring unsafe
            code, or copying memory. The struct has two fields of the required
            types that start at the same memory location.
            </summary>
        </member>
    </members>
</doc>
